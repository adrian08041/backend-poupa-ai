import { Transaction } from '../entities/transaction/transaction.entity';

/**
 * üö™ GATEWAY PATTERN (Repository Interface)
 *
 * CONCEITO:
 * - √â uma INTERFACE abstrata na camada de dom√≠nio
 * - Define O QUE fazer, n√£o COMO fazer
 * - Implementa√ß√£o concreta fica na camada de infraestrutura
 *
 * POR QUE?
 * - Invers√£o de Depend√™ncia (SOLID)
 * - Dom√≠nio n√£o depende de detalhes de infraestrutura
 * - F√°cil trocar implementa√ß√£o (Prisma ‚Üí TypeORM ‚Üí MongoDB)
 * - Facilita testes (mock do reposit√≥rio)
 *
 * PADR√ÉO DO PROJETO:
 * - Seguindo o UserGateway (linha 3-7 de user.gateway.ts)
 * - M√©todos abstratos que ser√£o implementados pelo PrismaRepository
 */

export abstract class TransactionGateway {
  /**
   * Cria uma nova transa√ß√£o no banco
   */
  abstract create(transaction: Transaction): Promise<void>;

  /**
   * Busca transa√ß√£o por ID
   * Retorna null se n√£o encontrar
   */
  abstract findById(id: string): Promise<Transaction | null>;

  /**
   * Busca todas as transa√ß√µes de um usu√°rio
   * N√£o inclui transa√ß√µes deletadas (deletedAt != null)
   */
  abstract findByUserId(userId: string): Promise<Transaction[]>;
}
